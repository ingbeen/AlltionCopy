<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.mapper.AdminMapper">
	<resultMap type="TradingVO" id="TradingMap">
		<id property="trading_product_number" column="trading_product_number" />
		<id property="trading_buyer_id" column="trading_buyer_id" />
		<id property="trading_price" column="trading_price" />
		<id property="trading_deposit_deadline" column="trading_deposit_deadline" />
		<id property="trading_waybill_deadline" column="trading_waybill_deadline" />
		<id property="trading_purchase_deadline" column="trading_purchase_deadline" />
		<id property="trading_transaction_method" column="trading_transaction_method" />
		<id property="trading_waybill_number" column="trading_waybill_number" />
		<id property="trading_progress" column="trading_progress" />
		<id property="trading_date" column="trading_date" />
	</resultMap>
	
	<resultMap type="ProductVO" id="ProductMap">
		<id property="product_id" column="product_id" />
	</resultMap>
	
	<!-- trading, product 테이블의 조인을 위한 resultMap -->
	<resultMap type="AdminProductJoinTradingVO" id="AdminProductJoinTradingMap">
		<collection property="tradingVO" resultMap="TradingMap" />
		<collection property="productVO" resultMap="ProductMap" />
	</resultMap>
	
	<!-- 회원수 -->
	<select id="getMemberCount" resultType="int">
		SELECT COUNT(*) 
		FROM MEMBER
		WHERE MEMBER_MANAGER != 1
	</select>
	
	<!-- 경매건수 -->
	<select id="getProductCount" resultType="int">
		SELECT COUNT(*) 
		FROM PRODUCT
	</select>
	
	<!-- 거래건수 -->
	<select id="getTradingCount" resultType="int">
		SELECT COUNT(*) 
		FROM TRADING
	</select>
	
	<!-- 입찰건수 -->
	<select id="getBidCount" resultType="int">
		SELECT COUNT(*) 
		FROM BID_LIST
	</select>
	
	<!-- 결제금액 -->
	<select id="getPaySum" resultType="int">
		SELECT NVL(SUM(PAY_AMOUNT), 0)
		FROM PAY
		WHERE PAY_STATUS = 'PAID'
	</select>
	
	<!-- 최근 일주일 경매등록수 -->
	<select id="getDailyAuction" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM PRODUCT
		<![CDATA[
		WHERE TO_DATE(TO_CHAR(SYSDATE-(#{period}), 'YYYY-MM-DD'), 'YYYY-MM-DD') <= PRODUCT_ISSUE_DATE 
			AND PRODUCT_ISSUE_DATE <= TO_DATE(TO_CHAR(SYSDATE-(#{period}-1), 'YYYY-MM-DD'), 'YYYY-MM-DD')
		]]>
	</select>
	
	<!-- 카테고리별 상품수-->
	<select id="getCateCount" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM PRODUCT
		WHERE PRODUCT_CATEGORY_1 = #{cate}
	</select>
	
	<!-- 최근 일주일 가입자수 -->
	<select id="getDailySubscribers" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER
		<![CDATA[
		WHERE TO_DATE(TO_CHAR(SYSDATE-(#{period}), 'YYYY-MM-DD'), 'YYYY-MM-DD') <= MEMBER_DATE 
			AND MEMBER_DATE <= TO_DATE(TO_CHAR(SYSDATE-(#{period}-1), 'YYYY-MM-DD'), 'YYYY-MM-DD')
		]]>
			AND MEMBER_MANAGER != 1
	</select>
	
	<!-- 멤버리스트 검색결과 갯수 -->
	<select id="getMemberListCount" parameterType="AdminMemberVO" resultType="int">
	 	SELECT COUNT(*)
	 	FROM MEMBER
	 	WHERE 
	 	<choose>
	 		<when test="adminMemberStatus == 0">
	 			MEMBER_DELETE = #{adminMemberStatus}
	 			AND MEMBER_MANAGER = 0
	 		</when>
	 		<when test="adminMemberStatus == 1">
	 			MEMBER_DELETE = #{adminMemberStatus} 
	 			AND MEMBER_MANAGER = 0
	 		</when>
	 		<when test="adminMemberStatus == 2">
	 			MEMBER_MANAGER = 0
	 		</when>
	 		<when test="adminMemberStatus == 3">
	 			MEMBER_MANAGER = 1
	 		</when>
	 	</choose>
	 	
	 	<if test="adminMemberId != null and adminMemberId != ''">
	 		AND MEMBER_ID LIKE '%' || #{adminMemberId} || '%' 
	 	</if>
	 	
	 	<if test="adminMemberName != null and adminMemberName != ''">
	 		AND MEMBER_NAME LIKE '%' || #{adminMemberName} || '%' 
	 	</if>
	 	
	 	<if test="adminMemberEmail != null and adminMemberEmail != ''">
	 		AND EMAIL LIKE '%' || #{adminMemberEmail} || '%' 
	 	</if>
	 	
	 	<if test="adminMemberPhone != null and adminMemberPhone != ''">
	 		AND MEMBER_PHONE LIKE '%' || #{adminMemberPhone} || '%' 
	 	</if>
	 	
	 	<if test="adminMemberStartDate != null and adminMemberStartDate != '' and adminMemberEndDate != null and adminMemberEndDate != ''">
	 		AND MEMBER_DATE BETWEEN 
	 			TO_DATE(#{adminMemberStartDate}, 'YYYY-MM-DD') 
	 			AND TO_DATE(#{adminMemberEndDate}, 'YYYY-MM-DD') + 1
	 	</if>
	</select>
	
	<!-- 멤버리스트 검색결과 -->
	<select id="getMemberList" parameterType="AdminMemberVO" resultType="MemberVO">
	 	SELECT *
		FROM (SELECT
				ROW_NUMBER() OVER (ORDER BY 
			 	<choose>
			 		<when test="adminMemberSort == 0">
			 			MEMBER_DATE DESC
			 		</when>
			 		<when test="adminMemberSort == 1">
			 			MEMBER_DATE ASC
			 		</when>
			 		<when test="adminMemberSort == 2">
			 			MEMBER_ID DESC
			 		</when>
			 		<when test="adminMemberSort == 3">
			 			MEMBER_ID ASC
			 		</when>
			 		<when test="adminMemberSort == 4">
			 			MEMBER_NAME DESC
			 		</when>
			 		<when test="adminMemberSort == 5">
			 			MEMBER_NAME ASC
			 		</when>
			 	</choose>
				) RNUM
				, MEMBER_NAME
				, MEMBER_ID
				, EMAIL
				, MEMBER_PHONE
				, MEMBER_DELETE
				, MEMBER_MANAGER
				, TO_CHAR(MEMBER_DATE, 'YYYY-MM-DD HH24:MI') MEMBER_DATE
	 		FROM MEMBER
		 	WHERE 
		 	<choose>
		 		<when test="adminMemberStatus == 0">
		 			MEMBER_DELETE = #{adminMemberStatus}
		 			AND MEMBER_MANAGER = 0
		 		</when>
		 		<when test="adminMemberStatus == 1">
		 			MEMBER_DELETE = #{adminMemberStatus}
		 			AND MEMBER_MANAGER = 0
		 		</when>
		 		<when test="adminMemberStatus == 2">
		 			MEMBER_MANAGER = 0
		 		</when>
		 		<when test="adminMemberStatus == 3">
		 			MEMBER_MANAGER = 1
		 		</when>
		 	</choose>
		 	
		 	<if test="adminMemberId != null and adminMemberId != ''">
		 		AND MEMBER_ID LIKE '%' || #{adminMemberId} || '%' 
		 	</if>
		 	
		 	<if test="adminMemberName != null and adminMemberName != ''">
		 		AND MEMBER_NAME LIKE '%' || #{adminMemberName} || '%' 
		 	</if>
		 	
		 	<if test="adminMemberEmail != null and adminMemberEmail != ''">
		 		AND EMAIL LIKE '%' || #{adminMemberEmail} || '%' 
		 	</if>
		 	
		 	<if test="adminMemberPhone != null and adminMemberPhone != ''">
		 		AND MEMBER_PHONE LIKE '%' || #{adminMemberPhone} || '%' 
		 	</if>
		 	
		 	<if test="adminMemberStartDate != null and adminMemberStartDate != '' and adminMemberEndDate != null and adminMemberEndDate != ''">
		 		AND MEMBER_DATE BETWEEN 
		 			TO_DATE(#{adminMemberStartDate}, 'YYYY-MM-DD') 
		 			AND TO_DATE(#{adminMemberEndDate}, 'YYYY-MM-DD') + 1
		 	</if>
		 	)
	 	<![CDATA[
		WHERE RNUM >= #{startrow}
		  AND RNUM <= #{endrow}
		]]>
	</select>
	
	<!-- 멤버정보 수정 -->
	<update id="adminMemberUpdate" parameterType="AdminMemberVO" >
		UPDATE MEMBER 
		SET MEMBER_NAME = #{adminMemberName}
			, EMAIL = #{adminMemberEmail}
			, MEMBER_PHONE = #{adminMemberPhone}
			<choose>
		 		<when test="adminMemberStatus == 0">
		 			, MEMBER_DELETE = #{adminMemberStatus}
		 		</when>
		 		<when test="adminMemberStatus == 1">
		 			, MEMBER_DELETE = #{adminMemberStatus}
		 		</when>
		 		<when test="adminMemberStatus == 3">
		 			, MEMBER_MANAGER = 1
		 		</when>
		 	</choose>
		WHERE MEMBER_ID = #{adminMemberId}
	</update>
	
	<!-- 상품리스트 검색결과 갯수 -->
	<select id="getProductListCount" parameterType="AdminProductVO" resultType="int">
	 	SELECT COUNT(*)
	 	FROM PRODUCT
	 	WHERE 
	 	<choose>
	 		<when test="adminProductStatus == 0">
	 			PRODUCT_PROGRESS = #{adminProductStatus}
	 		</when>
	 		<when test="adminProductStatus == 1">
	 			PRODUCT_PROGRESS = #{adminProductStatus}
	 		</when>
	 		<when test="adminProductStatus == 2">
	 			PRODUCT_PROGRESS LIKE '%'
	 		</when>
	 	</choose>
	 	
	 	<choose>
	 		<when test='adminProductCate.equals("cate01")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate02")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate03")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate04")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate05")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate06")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate07")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate08")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate09")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate10")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate11")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 		<when test='adminProductCate.equals("cate12")'>
	 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
	 		</when>
	 	</choose>
	 	
	 	<if test="adminProductNumber != null and adminProductNumber != ''">
	 		AND PRODUCT_NUMBER LIKE '%' || #{adminProductNumber} || '%' 
	 	</if>
	 	
	 	<if test="adminProductSubject != null and adminProductSubject != ''">
	 		AND PRODUCT_SUBJECT LIKE '%' || #{adminProductSubject} || '%' 
	 	</if>
	 	
	 	<if test="adminProductId != null and adminProductId != ''">
	 		AND PRODUCT_ID LIKE '%' || #{adminProductId} || '%' 
	 	</if>
	 	
	 	<if test="adminProductStartDate != null and adminProductStartDate != '' and adminProductEndDate != null and adminProductEndDate != ''">
	 		AND PRODUCT_ISSUE_DATE BETWEEN 
	 			TO_DATE(#{adminProductStartDate}, 'YYYY-MM-DD') 
	 			AND TO_DATE(#{adminProductEndDate}, 'YYYY-MM-DD') + 1
	 	</if>
	</select>
	
	<!-- 멤버리스트 검색결과 -->
	<select id="getProductList" parameterType="AdminProductVO" resultType="ProductVO">
	 	SELECT *
	 	FROM (SELECT 
 				ROW_NUMBER() OVER (ORDER BY
                    <choose>
                        <when test="adminProductSort == 0">
                             PRODUCT_ISSUE_DATE DESC
                        </when>
                        <when test="adminProductSort == 1">
                             PRODUCT_ISSUE_DATE ASC
                        </when>
                        <when test="adminProductSort == 2">
                             PRODUCT_END_DATE DESC
                        </when>
                        <when test="adminProductSort == 3">
                             PRODUCT_END_DATE ASC
                        </when>
                        <when test="adminProductSort == 4">
                             PRODUCT_BIDS DESC
                        </when>
                        <when test="adminProductSort == 5">
                             PRODUCT_BIDS ASC
                        </when>
                  </choose>
                  ) RNUM
                  , PRODUCT_NUMBER
                  , PRODUCT_SUBJECT
                  , PRODUCT_ID
                  , PRODUCT_CATEGORY_1
                  , PRODUCT_CURRENT_PRICE
                  , PRODUCT_BIDS
                  , TO_CHAR(PRODUCT_END_DATE, 'YYYY-MM-DD HH24:MI') AS PRODUCT_END_DATE
                  , TO_CHAR(PRODUCT_ISSUE_DATE, 'YYYY-MM-DD HH24:MI') AS PRODUCT_ISSUE_DATE
                  , PRODUCT_PROGRESS
		 		FROM PRODUCT
			 	WHERE 
			 	<choose>
			 		<when test="adminProductStatus == 0">
			 			PRODUCT_PROGRESS = #{adminProductStatus}
			 		</when>
			 		<when test="adminProductStatus == 1">
			 			PRODUCT_PROGRESS = #{adminProductStatus}
			 		</when>
			 		<when test="adminProductStatus == 2">
			 			PRODUCT_PROGRESS LIKE '%'
			 		</when>
			 	</choose>
			 	
			 	<choose>
			 		<when test='adminProductCate.equals("cate01")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate02")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate03")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate04")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate05")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate06")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate07")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate08")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate09")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate10")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate11")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 		<when test='adminProductCate.equals("cate12")'>
			 			AND PRODUCT_CATEGORY_1 = #{adminProductCate}
			 		</when>
			 	</choose>
			 	
			 	<if test="adminProductNumber != null and adminProductNumber != ''">
			 		AND PRODUCT_NUMBER LIKE '%' || #{adminProductNumber} || '%' 
			 	</if>
			 	
			 	<if test="adminProductSubject != null and adminProductSubject != ''">
			 		AND PRODUCT_SUBJECT LIKE '%' || #{adminProductSubject} || '%' 
			 	</if>
			 	
			 	<if test="adminProductId != null and adminProductId != ''">
			 		AND PRODUCT_ID LIKE '%' || #{adminProductId} || '%' 
			 	</if>
			 	
			 	<if test="adminProductStartDate != null and adminProductStartDate != '' and adminProductEndDate != null and adminProductEndDate != ''">
			 		AND PRODUCT_ISSUE_DATE BETWEEN 
			 			TO_DATE(#{adminProductStartDate}, 'YYYY-MM-DD') 
			 			AND TO_DATE(#{adminProductEndDate}, 'YYYY-MM-DD') + 1
			 	</if>
		 	)
		<![CDATA[
		WHERE RNUM >= #{startrow} AND RNUM <= #{endrow}
		]]>
	</select>
	
	<!-- 상품마감처리 -->
	<update id="adminProductEnd" parameterType="ProductVO">
		<selectKey keyProperty="product_end_date" resultType="String" order="AFTER">
			SELECT TO_CHAR(PRODUCT_END_DATE, 'YYYY-MM-DD HH24:MI') AS PRODUCT_END_DATE 
			FROM PRODUCT
			WHERE PRODUCT_NUMBER = #{product_number}
		</selectKey>
		UPDATE PRODUCT
		SET PRODUCT_PROGRESS = 1
			, PRODUCT_END_DATE = SYSDATE
		WHERE PRODUCT_NUMBER = #{product_number}
	</update>
	
	<!-- 거래리스트 검색결과 갯수 -->
	<select id="getTradingListCount" parameterType="AdminTradingVO" resultType="int">
	 	SELECT COUNT(*)
	 	FROM TRADING, PRODUCT
	 	WHERE PRODUCT_NUMBER = TRADING_PRODUCT_NUMBER
	 	<choose>
	 		<when test='adminTradingSystem.equals("전체")'>
	 			AND (TRADING_TRANSACTION_METHOD LIKE '%' 
	 				OR TRADING_TRANSACTION_METHOD IS NULL)
	 		</when>
	 		<when test='adminTradingSystem.equals("택배")'>
	 			AND TRADING_TRANSACTION_METHOD IN ('선불', '착불')
	 		</when>
	 		<when test='adminTradingSystem.equals("직거래")'>
	 			AND TRADING_TRANSACTION_METHOD NOT IN ('선불', '착불') 
	 			AND TRADING_TRANSACTION_METHOD IS NOT NULL
	 		</when>
	 		<when test='adminTradingSystem.equals("미정")'>
	 			AND TRADING_TRANSACTION_METHOD IS NULL
	 		</when>
	 	</choose>
	 	
	 	<choose>
	 		<when test='adminTradingStatus.equals("전체")'></when>
	 		<otherwise>
				AND TRADING_PROGRESS = #{adminTradingStatus}
			</otherwise>
	 	</choose>
	 	
	 	<if test="adminTradingNumber != null and adminTradingNumber != ''">
	 		AND TRADING_PRODUCT_NUMBER LIKE '%' || #{adminTradingNumber} || '%' 
	 	</if>
	 	
	 	<if test="adminTradingBuyerId != null and adminTradingBuyerId != ''">
	 		AND TRADING_BUYER_ID LIKE '%' || #{adminTradingBuyerId} || '%' 
	 	</if>
	 	
	 	<if test="adminTradingSellerId != null and adminTradingSellerId != ''">
	 		AND PRODUCT_ID LIKE '%' || #{adminTradingSellerId} || '%' 
	 	</if>
	 	
	 	<if test="adminTradingStartDate != null and adminTradingStartDate != '' and adminTradingEndDate != null and adminTradingEndDate != ''">
	 		AND TRADING_DATE BETWEEN 
	 			TO_DATE(#{adminTradingStartDate}, 'YYYY-MM-DD') 
	 			AND TO_DATE(#{adminTradingEndDate}, 'YYYY-MM-DD') + 1
	 	</if>
	</select>
	
	<!-- 거래리스트 검색결과 -->
	<select id="getTradingList" parameterType="AdminTradingVO" resultMap="AdminProductJoinTradingMap">
	 	SELECT *
	 	FROM (SELECT
	 		ROW_NUMBER() OVER (ORDER BY
                    <choose>
                        <when test="adminTradingSort == 0">
                             TRADING_DATE DESC
                        </when>
                        <when test="adminTradingSort == 1">
                             TRADING_DATE ASC
                        </when>
                        <when test="adminTradingSort == 2">
                             TRADING_PRICE DESC
                        </when>
                        <when test="adminTradingSort == 3">
                             TRADING_PRICE ASC
                        </when>
                  </choose>
                  ) RNUM
                  , TRADING_PRODUCT_NUMBER
                  , TRADING_BUYER_ID
                  , PRODUCT_ID
                  , TRADING_PRICE
                  , TO_CHAR(TRADING_DEPOSIT_DEADLINE, 'YYYY-MM-DD HH24:MI') AS TRADING_DEPOSIT_DEADLINE
                  , NVL(TO_CHAR(TRADING_WAYBILL_DEADLINE, 'YYYY-MM-DD HH24:MI'),' ') AS TRADING_WAYBILL_DEADLINE
                  , NVL(TO_CHAR(TRADING_PURCHASE_DEADLINE, 'YYYY-MM-DD HH24:MI'),' ') AS TRADING_PURCHASE_DEADLINE
                  , TRADING_TRANSACTION_METHOD
                  , NVL(TRADING_WAYBILL_NUMBER,' ') AS TRADING_WAYBILL_NUMBER
                  , TRADING_PROGRESS
                  , TO_CHAR(TRADING_DATE, 'YYYY-MM-DD HH24:MI') AS TRADING_DATE
		 	FROM TRADING, PRODUCT
		 	WHERE PRODUCT_NUMBER = TRADING_PRODUCT_NUMBER
		 	<choose>
		 		<when test='adminTradingSystem.equals("전체")'>
		 			AND (TRADING_TRANSACTION_METHOD LIKE '%' 
		 				OR TRADING_TRANSACTION_METHOD IS NULL)
		 		</when>
		 		<when test='adminTradingSystem.equals("택배")'>
		 			AND TRADING_TRANSACTION_METHOD IN ('선불', '착불')
		 		</when>
		 		<when test='adminTradingSystem.equals("직거래")'>
		 			AND TRADING_TRANSACTION_METHOD NOT IN ('선불', '착불') 
		 			AND TRADING_TRANSACTION_METHOD IS NOT NULL
		 		</when>
		 		<when test='adminTradingSystem.equals("미정")'>
		 			AND TRADING_TRANSACTION_METHOD IS NULL
		 		</when>
		 	</choose>
		 	
		 	<choose>
		 		<when test='adminTradingStatus.equals("전체")'></when>
		 		<otherwise>
					AND TRADING_PROGRESS = #{adminTradingStatus}
				</otherwise>
		 	</choose>
		 	
		 	<if test="adminTradingNumber != null and adminTradingNumber != ''">
		 		AND TRADING_PRODUCT_NUMBER LIKE '%' || #{adminTradingNumber} || '%' 
		 	</if>
		 	
		 	<if test="adminTradingBuyerId != null and adminTradingBuyerId != ''">
		 		AND TRADING_BUYER_ID LIKE '%' || #{adminTradingBuyerId} || '%' 
		 	</if>
		 	
		 	<if test="adminTradingSellerId != null and adminTradingSellerId != ''">
		 		AND PRODUCT_ID LIKE '%' || #{adminTradingSellerId} || '%' 
		 	</if>
		 	
		 	<if test="adminTradingStartDate != null and adminTradingStartDate != '' and adminTradingEndDate != null and adminTradingEndDate != ''">
		 		AND TRADING_DATE BETWEEN 
		 			TO_DATE(#{adminTradingStartDate}, 'YYYY-MM-DD') 
		 			AND TO_DATE(#{adminTradingEndDate}, 'YYYY-MM-DD') + 1
		 	</if>
		 	)
	 	<![CDATA[
	 	WHERE RNUM >= #{startrow} 
	 		AND RNUM <= #{endrow}
        ]]>
	</select>
	
	<!-- 거래기한 연장 -->
	<update id="adminExtendDeadlineOfTrading" parameterType="hashmap">
		UPDATE TRADING
		SET 
			<if test='target == 0'>
		 		TRADING_PURCHASE_DEADLINE = TRADING_PURCHASE_DEADLINE + 1
		 	</if>
		 	
			<if test='target == 1'>
		 		TRADING_WAYBILL_DEADLINE = TRADING_WAYBILL_DEADLINE + 1
		 	</if>
		 	
			<if test='target == 2'>
		 		TRADING_DEPOSIT_DEADLINE = TRADING_DEPOSIT_DEADLINE + 1
		 	</if>
	 	WHERE TRADING_PRODUCT_NUMBER = #{tradingVO.trading_product_number}
	</update>
	
	<!-- 거래기한 연장 후 새로운 거래기한 가져오기 -->
	<select id="getTradingDeadline" parameterType="TradingVO" resultType="TradingVO">
		SELECT 
			TO_CHAR(TRADING_DEPOSIT_DEADLINE, 'YYYY-MM-DD HH24:MI') AS TRADING_DEPOSIT_DEADLINE
			, NVL(TO_CHAR(TRADING_WAYBILL_DEADLINE, 'YYYY-MM-DD HH24:MI'),' ') AS TRADING_WAYBILL_DEADLINE
			, NVL(TO_CHAR(TRADING_PURCHASE_DEADLINE, 'YYYY-MM-DD HH24:MI'),' ') AS TRADING_PURCHASE_DEADLINE
		FROM TRADING
		WHERE TRADING_PRODUCT_NUMBER = #{trading_product_number}
	</select>
	
	<!-- 거래 초기화 -->
	<update id="adminTradingReset" parameterType="TradingVO">
		<selectKey keyProperty="trading_buyer_id,trading_price,trading_deposit_deadline,trading_waybill_deadline,trading_purchase_deadline,trading_transaction_method,trading_waybill_number,trading_progress" resultType="TradingVO" order="AFTER">
			SELECT 
				TRADING_BUYER_ID
				, TRADING_PRICE
				, TO_CHAR(TRADING_DEPOSIT_DEADLINE, 'YYYY-MM-DD HH24:MI') AS TRADING_DEPOSIT_DEADLINE
				, NVL(TO_CHAR(TRADING_WAYBILL_DEADLINE, 'YYYY-MM-DD HH24:MI'),' ') AS TRADING_WAYBILL_DEADLINE
				, NVL(TO_CHAR(TRADING_PURCHASE_DEADLINE, 'YYYY-MM-DD HH24:MI'),' ') AS TRADING_PURCHASE_DEADLINE
				, TRADING_TRANSACTION_METHOD
				, TRADING_WAYBILL_NUMBER
				, TRADING_PROGRESS
			FROM TRADING
			WHERE TRADING_PRODUCT_NUMBER = #{trading_product_number}
		</selectKey>
		UPDATE TRADING
		SET 
			TRADING_DEPOSIT_DEADLINE = TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'YYYY-MM-DD HH24:MI') + 1
			, TRADING_WAYBILL_DEADLINE = NULL
			, TRADING_PURCHASE_DEADLINE = NULL
			, TRADING_TRANSACTION_METHOD = NULL
			, TRADING_SAMPLE4_POSTCODE = NULL
			, TRADING_SAMPLE4_ROADADDRESS = NULL
			, TRADING_SAMPLE4_JIBUNADDRESS = NULL
			, TRADING_SAMPLE4_DETAILADDRESS = NULL
			, TRADING_PHONE = NULL
			, TRADING_WAYBILL_NUMBER = NULL
			, TRADING_PROGRESS = '입금대기'
		WHERE TRADING_PRODUCT_NUMBER = #{trading_product_number}
	</update>
	
	<!-- 상품 제목 가져오기 -->
	<select id="getProductSubject" parameterType="int" resultType="String">
		SELECT PRODUCT_SUBJECT
		FROM PRODUCT
		WHERE PRODUCT_NUMBER = #{productNumber}
	</select>
	
	<!-- 현재 이머니잔액 가져오기 -->
	<select id="findCurrentMoney" parameterType="String" resultType="String">
		SELECT PAY_CURRENT_MONEY 
		FROM PAYLIST 
		WHERE PAY_ID = #{buyerId}
	</select>
	 
	<!-- 거래취소로 인한 이머니 복구 -->
	<insert id="adminCancelPayment" parameterType="PaymentVO">
		INSERT INTO PAYMENT
		VALUES (#{payment_userId}
				, #{payment_product_subject}
				, #{payment_amount}
				, #{payment_lastmoney}
				, #{payment_nowmoney}
				, #{payment_status}
				, SYSDATE)
	</insert>
	
	<!-- 현재 이머니잔액 변경 -->
	<update id="changeMoney" parameterType="hashmap">
		UPDATE PAYLIST 
		SET PAY_CURRENT_MONEY = #{newCurrentMoney} 
		WHERE PAY_ID = #{buyerId}
	</update>
	
	<!-- 결제리스트 검색결과 갯수 -->
	<select id="getPayListCount" parameterType="AdminPayVO" resultType="int">
	 	SELECT COUNT(*)
	 	FROM PAY
	 	WHERE
	 	<choose>
	 		<when test='adminPayMoneyFilter == 0'>
	 			<![CDATA[ 
	 			PAY_AMOUNT >= 0
	 			]]>
	 		</when>
	 		<when test='adminPayMoneyFilter == 1'>
	 			<![CDATA[ 
	 			PAY_AMOUNT >= #{adminPayMoney}
	 			]]>
	 		</when>
	 		<when test='adminPayMoneyFilter == 2'>
	 			<![CDATA[ 
	 			PAY_AMOUNT <= #{adminPayMoney}
	 			]]>
	 		</when>
	 	</choose>
	 	
	 	<choose>
	 		<when test='adminPayStatus.equals("전체")'></when>
	 		<otherwise>
				AND PAY_STATUS = #{adminPayStatus}
			</otherwise>
	 	</choose>
	 	
	 	<if test="adminPayId != null and adminPayId != ''">
	 		AND PAY_ID LIKE '%' || #{adminPayId} || '%' 
	 	</if>
	 	
	 	<if test="adminPayNumber != null and adminPayNumber != ''">
	 		AND PAY_MERCHANT_UID LIKE '%' || #{adminPayNumber} || '%' 
	 	</if>
	 	
	 	<if test="adminPayStartDate != null and adminPayStartDate != '' and adminPayEndDate != null and adminPayEndDate != ''">
	 		AND PAY_DATE BETWEEN 
	 			TO_DATE(#{adminPayStartDate}, 'YYYY-MM-DD') 
	 			AND TO_DATE(#{adminPayEndDate}, 'YYYY-MM-DD') + 1
	 	</if>
	</select>
	
	<!-- 결제리스트 검색결과 -->
	<select id="getPayList" parameterType="AdminPayVO" resultType="PayVO">
	 	SELECT *
	 	FROM (SELECT 
	 			ROW_NUMBER() OVER (ORDER BY
                    <choose>
                        <when test="adminPaySort == 0">
                             PAY_DATE DESC
                        </when>
                        <when test="adminPaySort == 1">
                             PAY_DATE asc
                        </when>
                        <when test="adminPaySort == 2">
                             PAY_AMOUNT DESC
                        </when>
                        <when test="adminPaySort == 3">
                             PAY_AMOUNT asc
                        </when>
                  </choose>
                  ) RNUM
                  , PAY_MERCHANT_UID
                  , PAY_ID
                  , PAY_STATUS
                  , PAY_AMOUNT
                  , PAY_LASTMONEY
                  , PAY_NOWMONEY
                  , PAY_DATE
		 	FROM PAY
		 	WHERE
		 	<choose>
		 		<when test='adminPayMoneyFilter == 0'>
		 			<![CDATA[ 
		 			PAY_AMOUNT >= 0
		 			]]>
		 		</when>
		 		<when test='adminPayMoneyFilter == 1'>
		 			<![CDATA[ 
		 			PAY_AMOUNT >= #{adminPayMoney}
		 			]]>
		 		</when>
		 		<when test='adminPayMoneyFilter == 2'>
		 			<![CDATA[ 
		 			PAY_AMOUNT <= #{adminPayMoney}
		 			]]>
		 		</when>
		 	</choose>
		 	
		 	<choose>
		 		<when test='adminPayStatus.equals("전체")'></when>
		 		<otherwise>
					AND PAY_STATUS = #{adminPayStatus}
				</otherwise>
		 	</choose>
		 	
		 	<if test="adminPayId != null and adminPayId != ''">
		 		AND PAY_ID LIKE '%' || #{adminPayId} || '%' 
		 	</if>
		 	
		 	<if test="adminPayNumber != null and adminPayNumber != ''">
		 		AND PAY_MERCHANT_UID LIKE '%' || #{adminPayNumber} || '%' 
		 	</if>
		 	
		 	<if test="adminPayStartDate != null and adminPayStartDate != '' and adminPayEndDate != null and adminPayEndDate != ''">
		 		AND PAY_DATE BETWEEN 
		 			TO_DATE(#{adminPayStartDate}, 'YYYY-MM-DD') 
		 			AND TO_DATE(#{adminPayEndDate}, 'YYYY-MM-DD') + 1
		 	</if>
		 	)
	 	<![CDATA[
	 	WHERE RNUM >= #{startrow} AND RNUM <= #{endrow}
        ]]>
	</select>
	
</mapper>